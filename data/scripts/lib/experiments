[[ -z $DIRNAME ]] && DIRNAME=$(dirname "$0")

SPEC_DIR="$DIRNAME/spec"
MODELS_DATASETS_SPEC="$SPEC_DIR/models_datasets"
EXPERIMENTS_SPEC_DIR="$SPEC_DIR/experiments"

source "$MODELS_DATASETS_SPEC"

function _check_array_sizes {
    local array_var1=$1
    local array_var2=$2

    local -n larray1=$array_var1
    local -n larray2=$array_var2

    (( ${#larray1[@]} == ${#larray2[@]} )) && return 0

    printf "Mismatch of the size of arrays %s and %s: %d != %d\n" $array_var1 $array_var2 ${#larray1[@]} ${#larray2[@]} >&2
    exit 9
}

_check_array_sizes OUTPUT_DIRS MODELS
_check_array_sizes OUTPUT_DIRS DATASETS

function _read_experiments_spec_source {
    local f="$1"

    grep -q '^EXPERIMENT_NAMES=' "$f" &>/dev/null || return 1

    source "$f" && source "$DIRNAME/lib/_set_experiments_spec"
}

function read_experiments_spec {
    local arg="$1"

    [[ -z $arg ]] && {
        printf "Expected experiments spec.\n" >&2
        return 1
    }

    export EXPERIMENTS_SPEC="$arg"

    [[ -r $arg ]] && _read_experiments_spec_source "$arg" && return 0

    local f="$EXPERIMENTS_SPEC_DIR/$arg"
    [[ -e $f ]] || {
        printf "Unrecognized experiments spec %s: file %s does not exist!\n" "$arg" "$f" >&2
        return 1
    }

    [[ -r $f ]] || {
        printf "Experiments spec file %s is not readable!\n" "$f" >&2
        return 1
    }

    _read_experiments_spec_source "$f" && return 0

    printf "Neither %s nor %s is a valid experiments spec file!\n" "$arg" "$f" >&2
    return 1
}

function maybe_read_consecutive {
    [[ $1 =~ ^(|\+)consecutive$ ]] || return 1

    export INCLUDE_CONSECUTIVE=1
    export CONSECUTIVE_ONLY=1

    [[ $1 =~ ^\+ ]] && CONSECUTIVE_ONLY=0

    return 0
}

function maybe_read_reverse {
    [[ $1 =~ ^(|\+)reverse$ ]] || return 1

    export INCLUDE_REVERSE=1
    export REVERSE_ONLY=1

    [[ $1 =~ ^\+ ]] && REVERSE_ONLY=0

    return 0
}

function maybe_read_max_samples {
    # [[ $1 =~ ^(short|[0-9]+)$ ]] || return 1
    [[ $1 =~ ^[0-9]+$ ]] || return 1

    ## Conflicting names with shortened datasets and incompatibility with consecutive experiments - dropping for now
    # MAX_SAMPLES_SHORT=20
    export MAX_SAMPLES=$1
    shift

    # [[ $MAX_SAMPLES == short ]] && MAX_SAMPLES=$MAX_SAMPLES_SHORT

    [[ $MAX_SAMPLES =~ ^[1-9][0-9]*$ ]] || {
        printf "Expected a concrete number of shuffled samples to process, got: %s\n" "$MAX_SAMPLES" >&2
        exit 1
    }

    # export SHORT=0
    # export MAX_SAMPLES_NAME
    # if (( $MAX_SAMPLES == $MAX_SAMPLES_SHORT )); then
    #     SHORT=1
    #     MAX_SAMPLES_NAME=short
    # else
    #     MAX_SAMPLES_NAME=Sn$MAX_SAMPLES
    # fi
    export MAX_SAMPLES_NAME=Sn$MAX_SAMPLES

    return 0
}

source "$EXPERIMENTS_SPEC_DIR/all"

ALL_EXPERIMENT_NAMES=("${EXPERIMENT_NAMES[@]}")

_check_array_sizes ALL_EXPERIMENT_NAMES EXPERIMENT_STRATEGIES

declare -A EXPERIMENT_TO_STRATEGIES

## Map experiment names to strategies
for exp_idx in ${!ALL_EXPERIMENT_NAMES[@]}; do
    experiment="${ALL_EXPERIMENT_NAMES[$exp_idx]}"
    strategies="${EXPERIMENT_STRATEGIES[$exp_idx]}"
    EXPERIMENT_TO_STRATEGIES[$experiment]="$strategies"
done

function find_strategies_for_experiment {
    local experiment="$1"
    local -n lexperiment_strategies=$2
    local exp_idx=$3

    local strategies
    if [[ -n $exp_idx && $EXPERIMENTS_SPEC == all ]]; then
        strategies="${EXPERIMENT_STRATEGIES[$exp_idx]}"
    else
        strategies="${EXPERIMENT_TO_STRATEGIES[$experiment]}"
    fi

    [[ -n $strategies ]] && {
        lexperiment_strategies="$strategies"
        return 0
    }

    ## EXPERIMENT_TO_STRATEGIES should contain all
    printf "UNEXPECTED\n" >&2
    exit 37

    local eidx
    for eidx in ${!ALL_EXPERIMENT_NAMES[@]}; do
        [[ $experiment == ${ALL_EXPERIMENT_NAMES[$eidx]} ]] || continue
        strategies="${EXPERIMENT_STRATEGIES[$eidx]}"
        EXPERIMENT_TO_STRATEGIES[$experiment]="$strategies"
        lexperiment_strategies="$strategies"
        return 0
    done
}
export -f find_strategies_for_experiment
